// <auto-generated />
using System;
using BloodDonationBE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonationBE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BloodDonationBE.Features.BloodDonationCampaigns.BloodDonationCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActiveTime")
                        .HasColumnType("date");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DonateTime")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(10, 8)")
                        .HasColumnName("lat");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("decimal(11, 8)")
                        .HasColumnName("lng");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("blood_donation_campaign");
                });

            modelBuilder.Entity("BloodDonationBE.Features.BloodRequests.BloodRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovingAdminId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FulfilledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RequestingUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("VerifyingStaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovingAdminId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("RequestingUserId");

                    b.HasIndex("VerifyingStaffId");

                    b.ToTable("blood_requests");
                });

            modelBuilder.Entity("BloodDonationBE.Features.BloodUnits.BloodUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("blood_type");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("date");

                    b.Property<int?>("DonorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product_type");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("blood_units");
                });

            modelBuilder.Entity("BloodDonationBE.Features.CampaignRegistrations.CampaignRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("campaign_registration");
                });

            modelBuilder.Entity("BloodDonationBE.Features.Hospitals.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_info");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("hospitals");
                });

            modelBuilder.Entity("BloodDonationBE.Features.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AvailabilityStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AvatarImage")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar_image");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("blood_type");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(10, 8)")
                        .HasColumnName("lat");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("decimal(11, 8)")
                        .HasColumnName("lng");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("BloodDonationBE.Features.BloodDonationCampaigns.BloodDonationCampaign", b =>
                {
                    b.HasOne("BloodDonationBE.Features.Hospitals.Hospital", "Hospital")
                        .WithMany("Campaigns")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("BloodDonationBE.Features.BloodRequests.BloodRequest", b =>
                {
                    b.HasOne("BloodDonationBE.Features.Users.User", "ApprovingAdmin")
                        .WithMany()
                        .HasForeignKey("ApprovingAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BloodDonationBE.Features.Hospitals.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationBE.Features.Users.User", "RequestingUser")
                        .WithMany()
                        .HasForeignKey("RequestingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationBE.Features.Users.User", "VerifyingStaff")
                        .WithMany()
                        .HasForeignKey("VerifyingStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovingAdmin");

                    b.Navigation("Hospital");

                    b.Navigation("RequestingUser");

                    b.Navigation("VerifyingStaff");
                });

            modelBuilder.Entity("BloodDonationBE.Features.BloodUnits.BloodUnit", b =>
                {
                    b.HasOne("BloodDonationBE.Features.Users.User", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId");

                    b.HasOne("BloodDonationBE.Features.Hospitals.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationBE.Features.CampaignRegistrations.CampaignRegistration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId");

                    b.HasOne("BloodDonationBE.Features.Users.User", "Verifier")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId");

                    b.Navigation("Donor");

                    b.Navigation("Hospital");

                    b.Navigation("Registration");

                    b.Navigation("Verifier");
                });

            modelBuilder.Entity("BloodDonationBE.Features.CampaignRegistrations.CampaignRegistration", b =>
                {
                    b.HasOne("BloodDonationBE.Features.BloodDonationCampaigns.BloodDonationCampaign", "Campaign")
                        .WithMany("Registrations")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationBE.Features.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodDonationBE.Features.BloodDonationCampaigns.BloodDonationCampaign", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("BloodDonationBE.Features.Hospitals.Hospital", b =>
                {
                    b.Navigation("Campaigns");
                });
#pragma warning restore 612, 618
        }
    }
}
