using Microsoft.EntityFrameworkCore;
using BloodDonationBE.Data;
using BloodDonationBE.Features.CampaignRegistrations.DTOs;
using BloodDonationBE.Common.Enums;
using BloodDonationBE.Features.BloodUnits;
using BloodDonationBE.Features.Users;
using BloodDonationBE.Services;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.Serialization;

namespace BloodDonationBE.Features.CampaignRegistrations;

public class CampaignRegistrationService : ICampaignRegistrationService
{
    private readonly AppDbContext _context;
    private readonly IBloodUnitService _bloodUnitService;
    private readonly IMailService _mailService;

    public CampaignRegistrationService(AppDbContext context, IBloodUnitService bloodUnitService, IMailService mailService)
    {
        _context = context;
        _bloodUnitService = bloodUnitService;
        _mailService = mailService;
    }

    public async Task<RegistrationResponseDto> CreateRegistrationAsync(int userId, CreateRegistrationDto dto)
    {
        var isAlreadyRegistered = await _context.CampaignRegistrations
            .AnyAsync(r => r.UserId == userId && r.CampaignId == dto.CampaignId);

        if (isAlreadyRegistered)
        {
            throw new BadHttpRequestException("B·∫°n ƒë√£ ƒëƒÉng k√Ω tham gia s·ª± ki·ªán n√†y r·ªìi.");
        }

        var newRegistration = new CampaignRegistration
        {
            UserId = userId,
            CampaignId = dto.CampaignId,
            Note = dto.Note,
            Status = RegistrationStatus.Confirmed,
            RegisteredAt = DateTime.UtcNow,
            ProductType = dto.ProductType ?? BloodProductType.WholeBlood // <-- TH√äM LOGIC N√ÄY
        };

        await _context.CampaignRegistrations.AddAsync(newRegistration);
        await _context.SaveChangesAsync();

        var created = await _context.CampaignRegistrations
            .Include(r => r.User)
            .Include(r => r.Campaign)
            .FirstAsync(r => r.Id == newRegistration.Id);

        return RegistrationResponseDto.FromEntity(created);
    }

    public async Task<IEnumerable<RegistrationResponseDto>> GetAllRegistrationsAsync()
    {
        var registrations = await _context.CampaignRegistrations
            .Include(r => r.User)
            .Include(r => r.Campaign)
            .ToListAsync();

        return registrations.Select(RegistrationResponseDto.FromEntity);
    }

    public async Task<IEnumerable<RegistrationResponseDto>> GetRegistrationsByCampaignIdAsync(int campaignId)
    {
        var registrations = await _context.CampaignRegistrations
            .Where(r => r.CampaignId == campaignId)
            .Include(r => r.User)
            .Include(r => r.Campaign)
            .ToListAsync();

        return registrations.Select(RegistrationResponseDto.FromEntity);
    }

    public async Task<RegistrationResponseDto> UpdateRegistrationAsync(int registrationId, UpdateRegistrationDto dto)
    {
        var registration = await _context.CampaignRegistrations
            .Include(r => r.User)
            .Include(r => r.Campaign)
            .FirstOrDefaultAsync(r => r.Id == registrationId);

        if (registration == null)
        {
            throw new KeyNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒëƒÉng k√Ω.");
        }

        registration.Status = dto.Status;
        if (dto.Note != null)
        {
            registration.Note = dto.Note;
        }

        if (dto.BloodType.HasValue)
        {
            registration.User.BloodType = dto.BloodType.Value;
            _context.Users.Update(registration.User);
        }

        // Logic khi hi·∫øn m√°u th√†nh c√¥ng
        if (dto.Status == RegistrationStatus.Completed)
        {
            if (!dto.Volume.HasValue)
            {
                throw new BadHttpRequestException("L∆∞·ª£ng m√°u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng khi tr·∫°ng th√°i l√† COMPLETED.");
            }
            registration.Volume = dto.Volume.Value;

            await _bloodUnitService.CreateFromRegistrationAsync(registration.Id);
            await _context.SaveChangesAsync();

            // G·ª≠i email th√¥ng b√°o
            try
            {
                var user = registration.User;
                var campaign = registration.Campaign;
                var cooldownDays = GetCooldownDays(registration.ProductType);
                var nextDonationDate = campaign.ActiveTime.AddDays(cooldownDays);
                var bloodTypeName = GetBloodTypeName(user.BloodType);
                var subject = $"C·∫£m ∆°n {user.FullName} ƒë√£ hi·∫øn m√°u nh√¢n ƒë·∫°o!";
                var body = $@"
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; }}
                .container {{ width: 100%; max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; border: 1px solid #ddd; }}
                .header {{ background-color: #d9534f; color: #ffffff; padding: 20px; text-align: center; }}
                .header h1 {{ margin: 0; }}
                .content {{ padding: 20px 30px; color: #333; line-height: 1.6; }}
                .info-box {{ background-color: #f9f9f9; border: 1px solid #eee; padding: 15px; border-radius: 5px; margin: 20px 0; }}
                .info-box strong {{ color: #d9534f; }}
                .footer {{ background-color: #f4f4f4; color: #777; padding: 20px; text-align: center; font-size: 12px; }}
                .advice-section h3 {{ color: #d9534f; border-bottom: 2px solid #f0f0f0; padding-bottom: 5px; }}
                .advice-section ul {{ list-style-type: 'ü©∏'; padding-left: 20px; }}
            </style>
        </head>
        <body>
            <div class=""container"">
                <div class=""header"">
                    <h1>C·∫£m ∆°n b·∫°n!</h1>
                </div>
                <div class=""content"">
                    <p>Xin ch√†o <strong>{user.FullName}</strong>,</p>
                    <p>Thay m·∫∑t ban t·ªï ch·ª©c, ch√∫ng t√¥i xin ch√¢n th√†nh c·∫£m ∆°n b·∫°n ƒë√£ tham gia hi·∫øn m√°u t·∫°i s·ª± ki·ªán <strong>{campaign.Name}</strong> v√†o ng√†y {campaign.ActiveTime:dd/MM/yyyy}.</p>
                    
                    <div class=""info-box"">
                        <p><strong>Nh√≥m m√°u:</strong> {bloodTypeName}</p>
                        <p><strong>Lo·∫°i m√°u hi·∫øn:</strong> {GetBloodProductTypeName(registration.ProductType)}</p>
                        <p><strong>L∆∞·ª£ng m√°u ƒë√£ hi·∫øn:</strong> {registration.Volume}ml</p>
                        <p><strong>Ng√†y c√≥ th·ªÉ hi·∫øn l·∫°i:</strong> Sau ng√†y {nextDonationDate:dd/MM/yyyy} ({cooldownDays} ng√†y ngh·ªâ)</p>
                    </div>

                    <div class=""advice-section"">
                        <h3>üí° L·ªùi khuy√™n chƒÉm s√≥c s·ª©c kh·ªèe sau khi hi·∫øn m√°u</h3>
                        <p>ƒê·ªÉ ƒë·∫£m b·∫£o s·ª©c kh·ªèe h·ªìi ph·ª•c t·ªët nh·∫•t, b·∫°n vui l√≤ng tham kh·∫£o c√°c h∆∞·ªõng d·∫´n sau:</p>
                        <ul>
                            <li><strong>B·ªï sung n∆∞·ªõc:</strong> U·ªëng nhi·ªÅu n∆∞·ªõc ho·∫∑c n∆∞·ªõc hoa qu·∫£ trong 24 gi·ªù ƒë·∫ßu ƒë·ªÉ b√π l·∫°i l∆∞·ª£ng d·ªãch ƒë√£ m·∫•t.</li>
                            <li><strong>Th·ª±c ph·∫©m gi√†u s·∫Øt:</strong> ƒÇn c√°c m√≥n gi√†u ch·∫•t s·∫Øt nh∆∞ th·ªãt ƒë·ªè, gan, tr·ª©ng, rau c√≥ m√†u xanh ƒë·∫≠m (c·∫£i b√≥ x√¥i).</li>
                            <li><strong>Th·ª±c ph·∫©m gi√†u Vitamin C:</strong> ƒÇn th√™m cam, chanh, d√¢u t√¢y ƒë·ªÉ gi√∫p c∆° th·ªÉ h·∫•p th·ª• s·∫Øt t·ªët h∆°n.</li>
                            <li><strong>Ngh·ªâ ng∆°i h·ª£p l√Ω:</strong> Tr√°nh c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t g·∫Øng s·ª©c trong v√≤ng 24 gi·ªù sau khi hi·∫øn m√°u.</li>
                        </ul>
                    </div>

                    <p>Ch√∫c b·∫°n th·∫≠t nhi·ªÅu s·ª©c kh·ªèe v√† hy v·ªçng s·∫Ω ti·∫øp t·ª•c nh·∫≠n ƒë∆∞·ª£c s·ª± ƒë·ªìng h√†nh c·ªßa b·∫°n trong c√°c s·ª± ki·ªán s·∫Øp t·ªõi!</p>
                    <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© BloodDonation</strong></p>
                </div>
                <div class=""footer"">
                    <p>&copy; {DateTime.Now.Year} BloodDonation Project. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                </div>
            </div>
        </body>
        </html>";

                await _mailService.SendMailAsync(user.Email, subject, body);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to send completion email for registration {registration.Id}. Error: {ex.Message}");
            }
        }
        else
        {
            await _context.SaveChangesAsync();
        }

        await _context.Entry(registration).Reference(r => r.Campaign).LoadAsync();
        return RegistrationResponseDto.FromEntity(registration);
    }
    private int GetCooldownDays(BloodProductType type)
    {
        switch (type)
        {
            case BloodProductType.WholeBlood:
            case BloodProductType.RedCells:
                return 12 * 7;
            case BloodProductType.Platelets:
                return 28;
            case BloodProductType.Plasma:
                return 14;
            default:
                return 84;
        }
    }

    private string GetBloodProductTypeName(BloodProductType type)
    {
        return type switch
        {
            BloodProductType.WholeBlood => "m√°u to√†n ph·∫ßn",
            BloodProductType.RedCells => "h·ªìng c·∫ßu",
            BloodProductType.Platelets => "ti·ªÉu c·∫ßu",
            BloodProductType.Plasma => "huy·∫øt t∆∞∆°ng",
            _ => "m√°u"
        };
    }

    private string GetBloodTypeName(BloodType? bloodType)
    {
        if (!bloodType.HasValue || bloodType.Value == BloodType.None)
        {
            return "Ch∆∞a x√°c ƒë·ªãnh";
        }

        var enumType = typeof(BloodType);
        var memberInfo = enumType.GetMember(bloodType.Value.ToString()).FirstOrDefault();

        if (memberInfo != null)
        {
            var enumMemberAttribute = memberInfo.GetCustomAttribute<EnumMemberAttribute>();
            if (enumMemberAttribute != null)
            {
                return enumMemberAttribute.Value; 
            }
        }

        return bloodType.Value.ToString(); // Fallback n·∫øu kh√¥ng c√≥ attribute
    }

    public async Task<IEnumerable<DonationHistoryResponseDto>> GetDonationHistoryByUserIdAsync(int userId)
    {
        return await _context.CampaignRegistrations
            .Where(r => r.UserId == userId && r.Status == RegistrationStatus.Completed && r.Volume.HasValue)
            .Include(r => r.Campaign)
            .OrderByDescending(r => r.Campaign.ActiveTime)
            .Select(r => new DonationHistoryResponseDto
            {
                Date = r.Campaign.ActiveTime.ToString("dd/MM/yyyy"),
                Volume = r.Volume!.Value,
                Location = r.Campaign.Address
            })
            .ToListAsync();
    }

    public async Task<IEnumerable<RegistrationResponseDto>> GetMyRegistrationsAsync(int userId)
    {
        var registrations = await _context.CampaignRegistrations
            .Where(r => r.UserId == userId)
            .Include(r => r.User)
            .Include(r => r.Campaign)
            .OrderByDescending(r => r.Campaign.ActiveTime)
            .ToListAsync();

        return registrations.Select(RegistrationResponseDto.FromEntity);
    }

    public async Task<RegistrationResponseDto> CancelRegistrationAsync(int registrationId, int userId)
    {
        var registration = await _context.CampaignRegistrations
            .Include(r => r.User)
            .Include(r => r.Campaign)
            .FirstOrDefaultAsync(r => r.Id == registrationId);

        if (registration == null)
        {
            throw new KeyNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒëƒÉng k√Ω.");
        }

    
        if (registration.UserId != userId)
        {
            throw new UnauthorizedAccessException("B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy l∆∞·ª£t ƒëƒÉng k√Ω n√†y.");
        }      
        if (registration.Status == RegistrationStatus.Completed || registration.Status == RegistrationStatus.Cancelled)
        {
            throw new BadHttpRequestException($"Kh√¥ng th·ªÉ h·ªßy l∆∞·ª£t ƒëƒÉng k√Ω ·ªü tr·∫°ng th√°i '{registration.Status}'.");
        }

        registration.Status = RegistrationStatus.Cancelled;
        registration.Note = "Ng∆∞·ªùi d√πng t·ª± h·ªßy.";

        await _context.SaveChangesAsync();
        return RegistrationResponseDto.FromEntity(registration);
    }
}

